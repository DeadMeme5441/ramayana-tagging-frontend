# ---- Stage 1: Build the frontend application ----
# Use an appropriate Node.js version
FROM node:20-alpine AS builder

# Set the working directory inside the container
WORKDIR /app

# Copy package.json and package-lock.json (or yarn.lock, pnpm-lock.yaml)
COPY package*.json ./
# If using yarn or pnpm, copy the relevant lock file instead/additionally
# COPY yarn.lock ./
# COPY pnpm-lock.yaml ./

# Install dependencies
# Use 'npm ci' for cleaner installs in CI/CD environments if you have package-lock.json
RUN npm install
# Or: RUN yarn install --frozen-lockfile
# Or: RUN pnpm install --frozen-lockfile

# Copy the rest of your application source code
COPY . .

# Run the build command defined in your package.json
# Common commands: 'build', 'generate'. Check your package.json scripts.
RUN npm run build
# Or: RUN yarn build
# Or: RUN pnpm build

# ---- Stage 2: Serve the built application with Nginx ----
# Use a lightweight Nginx image
FROM nginx:alpine

# Optional: Remove default Nginx welcome page
# RUN rm -rf /usr/share/nginx/html/*

# Optional: Copy a custom Nginx configuration file if you have one
# COPY nginx.conf /etc/nginx/conf.d/default.conf

# Copy the built static files from the 'builder' stage
# Adjust '/app/dist' if your build process outputs to a different directory (e.g., /app/build)
COPY --from=builder /app/dist /usr/share/nginx/html

# Expose port 80 (standard HTTP port Nginx listens on by default)
EXPOSE 80

# Command to run Nginx in the foreground
CMD ["nginx", "-g", "daemon off;"]
